---
image: alpine:latest

stages:
  - build
  - upload
  - deploy
  - notify

variables:
  PACKAGE_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/archive/"

build_tag:
  image: php:7.4-cli-alpine
  stage: build
  tags:
    - docker
  only:
    - tags
  before_script:
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - mv composer.phar /usr/local/bin/composer
    - export RELEASE_VERSION=$(echo "${CI_COMMIT_TAG}" | sed 's/v//')
  script:
    - sed -i "s/\(<version>\)\( *\).*/\1\2${RELEASE_VERSION}/" install.xml
    - cd upload/system/library/cdek_official composer i -a
    - mkdir /cdek
    - cp -r * /cdek
    - mv /cdek .
  artifacts:
    name: cdek-integration
    paths:
      - cdek

build_custom:
  when: manual
  image: php:7.4-cli-alpine
  stage: build
  tags:
    - docker
  artifacts:
    name: cdek-integration
    paths:
      - cdek
  before_script:
    - php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
    - php composer-setup.php
    - php -r "unlink('composer-setup.php');"
    - mv composer.phar /usr/local/bin/composer
    - export RELEASE_VERSION="${CI_COMMIT_REF_NAME}#${CI_COMMIT_SHORT_SHA}"
  script:
    - sed -i "s/\(<version>\)\( *\).*/\1\2${RELEASE_VERSION}/" install.xml
    - cd upload/system/library/cdek_official composer i -a
    - mkdir /cdek
    - cp -r * /cdek
    - mv /cdek .

upload:
  stage: upload
  tags:
    - docker
  needs:
    - job: build_tag
      artifacts: true
  only:
    - tags
  before_script:
    - apk add curl zip
    - export RELEASE_VERSION=$(echo "${CI_COMMIT_TAG}" | sed 's/v//')
    - export ARCHIVE_VERSION=$(echo "${RELEASE_VERSION}" | sed 's/\./_/g')
  script:
    - zip -r cdek.zip cdek
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file cdek.zip "${PACKAGE_URL}${RELEASE_VERSION}/opencart_${ARCHIVE_VERSION}.ocmod.zip"'

release:
  stage: deploy
  tags:
    - docker
  needs:
    - job: upload
  only:
    - tags
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - export RELEASE_VERSION=$(echo "${CI_COMMIT_TAG}" | sed 's/v//')
    - export ARCHIVE_VERSION=$(echo "${RELEASE_VERSION}" | sed 's/\./_/g')
  script:
    - |
      release-cli create --name $CI_COMMIT_TAG --tag-name $CI_COMMIT_TAG \
        --assets-link "{\"name\":\"Архив\",\"filepath\":\"/archive\",\"url\":\"${PACKAGE_URL}${RELEASE_VERSION}/opencart_${ARCHIVE_VERSION}.ocmod.zip\", \"link_type\":\"package\"}" \

notify:
  stage: notify
  tags:
    - docker
  image: curlimages/curl
  needs:
    - job: release
  only:
    - tags
  script:
    - |
      curl -v -H "Content-Type: application/json" \
        -d "{\"channel\": \"cms-support\",
        \"username\": \"GitLab\",
        \"text\": \"Release $CI_PROJECT_NAME $CI_COMMIT_TAG :white_check_mark:\n
        | Component | URL | Build | User |
        |:----------|:--------|:------|:-----|
        | $CI_PROJECT_NAME | [GitLab](https://gitlab.cdek.ru/$CI_PROJECT_PATH/-/releases/$CI_COMMIT_TAG) | $CI_COMMIT_TAG | $CI_COMMIT_AUTHOR |
        \"}" $WEBHOOK_URL
